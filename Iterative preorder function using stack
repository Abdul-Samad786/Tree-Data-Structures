#include <iostream>
using namespace std;
struct Node{
  int data;
  Node *lchid;
  Node *rchild;
};
struct stack{
  int size;
  int top;
  Node **A;
  stack(int s){
    size=s;
    top=-1;
    A=new Node*[size];
}
};

void push(stack *sta,Node *x){
  if(sta->top==sta->size-1)
    cout<<"stack overrflow";
  else{
    sta->top++;
    sta->A[sta->top]=x;
  }
}
Node* pop(stack *sta){
  Node *x=NULL;
  if(sta->top==-1)
    cout<<"stack underflow";
  else{
    x=sta->A[sta->top];
    sta->top--;
  }
  return x;
}
int stack_is_empy(stack *sta){
  if(sta->top==-1)
    return 1;
  else
    return 0;
}
Node *root=NULL;
class Queue{
public:
  int size;
  int front;
  int rear;
  Node **Q;
  Queue(int s){
    this->size=s;
    front=rear=-1;
    Q=new Node* [size];
  }
  void enqueue(Queue *q,Node *x);
  Node* dequeue(Queue *q);
  int is_empty(Queue *q);
};
void Queue::enqueue(Queue *q,Node *x){
  if(q->rear==q->size-1)
    cout<<"Queue is full"<<endl;
  q->rear++;
  q->Q[q->rear]=x;
}
Node* Queue:: dequeue(Queue *q){
  Node *x=NULL;
  if(q->front==q->rear)
    cout<<"Queue is empty"<<endl;
  else{
  q->front++;
  x=q->Q[q->front];
}
  return x;}
int Queue::is_empty(Queue *q){
  // if(q->front==q->rear)
  //   return 0;
  // else
  //   return 1;
   return q->front==q->rear;
}
void create_tree(){
  Node *p,*temp;
  int x;
  Queue q(50);
  root=new Node;
  //cin>>x;
  root->data=1;
  root->lchid=root->rchild=NULL;
  q.enqueue(&q,root);
  while(!q.is_empty(&q)){
    p=q.dequeue(&q);
    cout<<"Enter the left child of:"<<p->data<<endl;
    cin>>x;
    cout<<endl;
    if(x!=-1){
      temp=new Node;
      temp->data=x;
      temp->lchid=temp->rchild=NULL;
      p->lchid=temp;
      q.enqueue(&q,temp);
    }
    cout<<"Enter right child of:"<<p->data<<endl;
    cin>>x;
    cout<<endl;
    if(x!=-1){
      temp=new Node;
      temp->data=x;
      temp->lchid=temp->rchild=NULL;
      p->rchild=temp;
      q.enqueue(&q,temp);
    }
  }
}
void preorder(Node *p){
  if(p){
        cout<<p->data<<endl;
      preorder(p->lchid);
    preorder(p->rchild);
  }
}
void Ipreorder(stack *st,Node *p){
  while(p||!stack_is_empy(st)){
    if(p){
      cout<<p->data<<endl;
      push(st,p);
      p=p->lchid;
    }
    else{
      p=pop(st);
      p=p->rchild;
    }
  }
}
int main(){
  create_tree();
  stack st(10);
  Ipreorder(&st,root);
  return 0;
}
